//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
// Parameters:

float4 AmbientColor : register(c1);
sampler2D BaseMap[7] : register(s0);
sampler2D NormalMap[7] : register(s7);
float4 PSLightColor[10] : register(c3);
float4 TESR_FogColor : register(c15);
float4 PSLightDir : register(c18);
float4 TESR_ShadowData : register(c32);
sampler2D TESR_ShadowMapBufferNear : register(s14) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s15) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };

// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   AmbientColor const_1       1
//   PSLightColor[0] const_3       1
//   PSLightDir   const_18      1
//   BaseMap      texture_0       4
//   NormalMap    texture_7       4
//


// Structures:

struct VS_INPUT {
	float3 LCOLOR_0 : COLOR0;
	float4 LCOLOR_1 : COLOR1;
    float3 BaseUV : TEXCOORD0;
    float3 texcoord_1 : TEXCOORD1_centroid;
    float3 texcoord_3 : TEXCOORD3_centroid;
    float3 texcoord_4 : TEXCOORD4_centroid;
    float3 texcoord_5 : TEXCOORD5_centroid;
	float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

#include "../Shadows/Includes/Shadow.hlsl"

PS_OUTPUT main(VS_INPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))

    float3 m32;
    float3 noxel0;
    float3 q1;
    float3 q14;
    float3 q2;
    float3 q3;
    float3 q4;
    float3 q5;
    float3 q6;
    float3 q7;
    float4 r0;
    float4 r2;
    float4 r3;
    float4 r4;
    float4 r5;
    float4 r6;
    float4 r7;

    r2.xyzw = tex2D(NormalMap[2], IN.BaseUV.xy);
    r0.xyzw = tex2D(NormalMap[1], IN.BaseUV.xy);
    r7.xyzw = tex2D(BaseMap[3], IN.BaseUV.xy);
    r6.xyzw = tex2D(BaseMap[2], IN.BaseUV.xy);
    r3.xyzw = tex2D(NormalMap[3], IN.BaseUV.xy);
    r4.xyzw = tex2D(BaseMap[1], IN.BaseUV.xy);
    noxel0.xyz = tex2D(NormalMap[0], IN.BaseUV.xy).xyz;
    r5.xyzw = tex2D(BaseMap[0], IN.BaseUV.xy);
    q4.xyz = normalize(IN.texcoord_5.xyz);
    q2.xyz = normalize(IN.texcoord_4.xyz);
    q3.xyz = normalize(IN.texcoord_3.xyz);
    m32.xyz = mul(float3x3(q3.xyz, q2.xyz, q4.xyz), PSLightDir.xyz);
    q5.xyz = (IN.LCOLOR_0.z * r6.xyz) + ((IN.LCOLOR_0.x * r5.xyz) + (r4.xyz * IN.LCOLOR_0.y));
    q1.xyz = (2 * ((noxel0.xyz - 0.5) * IN.LCOLOR_0.x)) + (2 * ((r0.xyz - 0.5) * IN.LCOLOR_0.y));	// [0,1] to [-1,+1]
    q14.xyz = normalize((2 * ((r3.xyz - 0.5) * IN.LCOLOR_1.x)) + ((2 * ((r2.xyz - 0.5) * IN.LCOLOR_0.z)) + q1.xyz));	// [0,1] to [-1,+1]
    q6.xyz = ((GetLightAmount(IN.texcoord_6, IN.texcoord_7) * (shades(q14.xyz, m32.xyz) * PSLightColor[0].rgb)) + AmbientColor.rgb) * ((IN.LCOLOR_1.x * r7.xyz) + q5.xyz);
    q7.xyz = (IN.BaseUV.z * (TESR_FogColor.xyz - (IN.texcoord_1.xyz * q6.xyz))) + (q6.xyz * IN.texcoord_1.xyz);
    OUT.color_0.a = 1;
    OUT.color_0.rgb = q7.xyz;

    return OUT;
};

// approximately 49 instruction slots used (8 texture, 41 arithmetic)