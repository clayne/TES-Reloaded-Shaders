//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
// Parameters:

float4 AmbientColor : register(c1);
sampler2D BaseMap[7] : register(s0);
sampler2D NormalMap[7] : register(s7);
float4 PSLightColor[10] : register(c3);
float4 TESR_FogColor : register(c15);
float4 PSLightDir : register(c18);
float4 PSLightPosition[8] : register(c19);
float4 TESR_ShadowData : register(c32);
sampler2D TESR_ShadowMapBufferNear : register(s14) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s15) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };

// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_1       1
//   PSLightColor[0]    const_3       4
//   PSLightDir      const_18      1
//   PSLightPosition[0] const_19      3
//   BaseMap         texture_0       1
//   NormalMap       texture_7       1
//


// Structures:

struct VS_INPUT {
	float LCOLOR_0 : COLOR0;
    float3 BaseUV : TEXCOORD0;
    float3 texcoord_1 : TEXCOORD1_centroid;
    float3 texcoord_2 : TEXCOORD2_centroid;
    float3 texcoord_3 : TEXCOORD3_centroid;
    float3 texcoord_4 : TEXCOORD4_centroid;
    float3 texcoord_5 : TEXCOORD5_centroid;
	float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
};

#include "../Shadows/Includes/Shadow.hlsl"

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))

    float3 m54;
    float3 m56;
    float3 m61;
    float3 m63;
    float3 noxel4;
    float3 q0;
    float3 q1;
    float3 q10;
    float3 q11;
    float3 q12;
    float3 q2;
    float3 q25;
    float3 q3;
    float3 q5;
    float3 q6;
    float3 q7;
    float3 q8;
    float3 q9;
    float4 r0;
    float4 r1;
    float3 r2;

    noxel4.xyz = tex2D(NormalMap[0], IN.BaseUV.xy).xyz;
    r1.xyzw = tex2D(BaseMap[0], IN.BaseUV.xy);
    q0.xyz = normalize(IN.texcoord_5.xyz);
    q1.xyz = normalize(IN.texcoord_4.xyz);
    q6.xyz = normalize(IN.texcoord_3.xyz);
    q5.xyz = normalize(2 * ((noxel4.xyz - 0.5) * IN.LCOLOR_0.x));	// [0,1] to [-1,+1]
    m56.xyz = mul(float3x3(q6.xyz, q1.xyz, q0.xyz), PSLightDir.xyz);
    r0.w = shades(q5.xyz, m56.xyz);
    q9.xyz = PSLightPosition[2].xyz - IN.texcoord_2.xyz;
    q10.xyz = q9.xyz / PSLightPosition[2].w;
    m63.xyz = mul(float3x3(q6.xyz, q1.xyz, q0.xyz), q9.xyz);
    q7.xyz = PSLightPosition[1].xyz - IN.texcoord_2.xyz;
    q8.xyz = q7.xyz / PSLightPosition[1].w;
    m61.xyz = mul(float3x3(q6.xyz, q1.xyz, q0.xyz), q7.xyz);
    q2.xyz = PSLightPosition[0].xyz - IN.texcoord_2.xyz;
    q3.xyz = q2.xyz / PSLightPosition[0].w;
    m54.xyz = mul(float3x3(q6.xyz, q1.xyz, q0.xyz), q2.xyz);
    r2.xyz = normalize(m54.xyz);
    q25.xyz = (r0.w * PSLightColor[0].rgb) + (((1 - shades(q3.xyz, q3.xyz)) * shades(q5.xyz, r2.xyz)) * PSLightColor[1].xyz);
    q11.xyz = (shades(q5.xyz, normalize(m61.xyz)) * (1 - shades(q8.xyz, q8.xyz)) * PSLightColor[2].xyz) + q25.xyz;
    q12.xyz = (shades(q5.xyz, normalize(m63.xyz)) * (1 - shades(q10.xyz, q10.xyz)) * PSLightColor[3].xyz) + q11.xyz;
    r0.xyz = ((GetLightAmount(IN.texcoord_6, IN.texcoord_7) * q12.xyz) + AmbientColor.rgb) * (r1.xyz * IN.LCOLOR_0.x);
    r1.xyz = r0.xyz * IN.texcoord_1.xyz;
    OUT.color_0.a = 1;
    OUT.color_0.rgb = (IN.BaseUV.z * (TESR_FogColor.xyz - (IN.texcoord_1.xyz * r0.xyz))) + r1.xyz;

    return OUT;
};

// approximately 73 instruction slots used (2 texture, 71 arithmetic)