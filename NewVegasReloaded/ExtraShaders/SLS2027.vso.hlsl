//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
// Parameters:

float4 Bones[54] : register(c44);
float4 EyePosition : register(c16);
float3 FogColor : register(c15);
float4 FogParam : register(c14);
float4 LightData[10] : register(c25);
row_major float4x4 SkinModelViewProj : register(c1);
float4 Vars : register(c17);
row_major float4x4 TESR_InvViewProjectionTransform : register(c35);

// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   SkinModelViewProj[0] const_1        1
//   SkinModelViewProj[1] const_2        1
//   SkinModelViewProj[2] const_3        1
//   SkinModelViewProj[3] const_4        1
//   FogParam          const_14      1
//   FogColor          const_15      1
//   EyePosition       const_16      1
//   Vars            const_17      1
//   LightData[0]         const_25      3
//   Bones[0]             const_44     54
//


// Structures:

struct VS_INPUT {
    float4 LPOSITION : POSITION;
    float3 LTANGENT : TANGENT;
    float3 LBINORMAL : BINORMAL;
    float3 LNORMAL : NORMAL;
    float4 LTEXCOORD_0 : TEXCOORD0;
    float4 LCOLOR_0 : COLOR0;
    float3 LBLENDWEIGHT : BLENDWEIGHT;
    float4 LBLENDINDICES : BLENDINDICES;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
    float4 color_1 : COLOR1;
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
    float4 texcoord_2 : TEXCOORD2;
    float4 texcoord_3 : TEXCOORD3;
    float4 texcoord_4 : TEXCOORD4;
    float3 texcoord_5 : TEXCOORD5;
    float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const float4 const_0 = {1, 765.01001, 0, 3};
    const int4 const_5 = {1, 2, 0, 0};

    float3 eye2;
    float3 m46;
    float4 mdl76;
    float4 offset;
    float1 q0;
    float4 q1;
    float1 q10;
    float3 q13;
    float1 q14;
    float3 q49;
    float3 q6;
    float3 q70;
    float3 q72;
    float3 q8;
    float3 q89;
    float4 r0;
    float4 r1;
    float3 r2;
    float4 r3;
    float3 r4;
    float3 r5;
	float4 shw;
	
    q0.x = min(3, Vars.z);
    OUT.color_0.rgba = IN.LCOLOR_0.xyzw;
    offset.xyzw = IN.LBLENDINDICES.zyxw * 765.01001;
    r5.z = dot(Bones[2 + offset.y].xyz, IN.LNORMAL.xyz);
    r4.z = dot(Bones[2 + offset.y].xyz, IN.LBINORMAL.xyz);
    r5.y = dot(Bones[1 + offset.y].xyz, IN.LNORMAL.xyz);
    r4.y = dot(Bones[1 + offset.y].xyz, IN.LBINORMAL.xyz);
    r5.x = dot(Bones[0 + offset.y].xyz, IN.LNORMAL.xyz);
    r4.x = dot(Bones[0 + offset.y].xyz, IN.LBINORMAL.xyz);
    r1.w = 1;
    q1.xyzw = (IN.LPOSITION.xyzx * const_0.xxxz) + const_0.zzzx;
    q10.x = frac(q0.x);
    r2.z = dot(Bones[2 + offset.y].xyzw, q1.xyzw);
    r2.y = dot(Bones[1 + offset.y].xyzw, q1.xyzw);
    r2.x = dot(Bones[0 + offset.y].xyzw, q1.xyzw);
    r0.yzw = r2.xyz * IN.LBLENDWEIGHT.y;
    r2.z = dot(Bones[2 + offset.x].xyzw, q1.xyzw);
    r2.y = dot(Bones[1 + offset.x].xyzw, q1.xyzw);
    r2.x = dot(Bones[0 + offset.x].xyzw, q1.xyzw);
    r0.yzw = (r2.xyz * IN.LBLENDWEIGHT.x) + r0.yzw;
    r2.z = dot(Bones[2 + offset.z].xyzw, q1.xyzw);
    r2.y = dot(Bones[1 + offset.z].xyzw, q1.xyzw);
    r2.x = dot(Bones[0 + offset.z].xyzw, q1.xyzw);
    r0.yzw = (r2.xyz * IN.LBLENDWEIGHT.z) + r0.yzw;
    r2.z = dot(Bones[2 + offset.w].xyzw, q1.xyzw);
    r2.y = dot(Bones[1 + offset.w].xyzw, q1.xyzw);
    r2.x = dot(Bones[0 + offset.w].xyzw, q1.xyzw);
    r3.xy = (const_5.xy < ((q0.x < 0.0 ? (-q10.x < q10.x ? 1.0 : 0.0) : 0) + (q0.x - q10.x)) ? 1.0 : 0.0);
    r1.xyz = ((1 - weight(IN.LBLENDWEIGHT.xyz)) * r2.xyz) + r0.yzw;
    mdl76 = mul(SkinModelViewProj, r1.xyzw);
	shw = mul(mdl76, TESR_InvViewProjectionTransform);
    OUT.position = mdl76;
    r2.z = dot(Bones[2 + offset.y].xyz, IN.LTANGENT.xyz);
    r2.y = dot(Bones[1 + offset.y].xyz, IN.LTANGENT.xyz);
    r2.x = dot(Bones[0 + offset.y].xyz, IN.LTANGENT.xyz);
    r0.yzw = r2.xyz * IN.LBLENDWEIGHT.y;
    r2.z = dot(Bones[2 + offset.x].xyz, IN.LTANGENT.xyz);
    r2.y = dot(Bones[1 + offset.x].xyz, IN.LTANGENT.xyz);
    r2.x = dot(Bones[0 + offset.x].xyz, IN.LTANGENT.xyz);
    q6.xyz = LightData[1].xyz - r1.xyz;
    eye2.xyz = EyePosition.xyz - r1.xyz;
    q14.x = log2(1 - saturate((FogParam.x - length(mdl76.xyz)) / FogParam.y));
    r0.yzw = (r2.xyz * IN.LBLENDWEIGHT.x) + r0.yzw;
    r2.z = dot(Bones[2 + offset.z].xyz, IN.LTANGENT.xyz);
    r2.y = dot(Bones[1 + offset.z].xyz, IN.LTANGENT.xyz);
    r2.x = dot(Bones[0 + offset.z].xyz, IN.LTANGENT.xyz);
    r0.yzw = (r2.xyz * IN.LBLENDWEIGHT.z) + r0.yzw;
    r2.z = dot(Bones[2 + offset.w].xyz, IN.LTANGENT.xyz);
    r2.y = dot(Bones[1 + offset.w].xyz, IN.LTANGENT.xyz);
    r2.x = dot(Bones[0 + offset.w].xyz, IN.LTANGENT.xyz);
    r2.xyz = normalize((r2.xyz * (1 - weight(IN.LBLENDWEIGHT.xyz))) + r0.yzw);
    r0.yzw = r4.xyz * IN.LBLENDWEIGHT.y;
    r4.z = dot(Bones[2 + offset.x].xyz, IN.LBINORMAL.xyz);
    r4.y = dot(Bones[1 + offset.x].xyz, IN.LBINORMAL.xyz);
    r4.x = dot(Bones[0 + offset.x].xyz, IN.LBINORMAL.xyz);
    r0.yzw = (r4.xyz * IN.LBLENDWEIGHT.x) + r0.yzw;
    r4.z = dot(Bones[2 + offset.z].xyz, IN.LBINORMAL.xyz);
    r4.y = dot(Bones[1 + offset.z].xyz, IN.LBINORMAL.xyz);
    r4.x = dot(Bones[0 + offset.z].xyz, IN.LBINORMAL.xyz);
    r0.yzw = (r4.xyz * IN.LBLENDWEIGHT.z) + r0.yzw;
    r4.z = dot(Bones[2 + offset.w].xyz, IN.LBINORMAL.xyz);
    r4.y = dot(Bones[1 + offset.w].xyz, IN.LBINORMAL.xyz);
    r4.x = dot(Bones[0 + offset.w].xyz, IN.LBINORMAL.xyz);
    r4.xyz = normalize((r4.xyz * (1 - weight(IN.LBLENDWEIGHT.xyz))) + r0.yzw);
    r0.yzw = r5.xyz * IN.LBLENDWEIGHT.y;
    r5.z = dot(Bones[2 + offset.x].xyz, IN.LNORMAL.xyz);
    r5.y = dot(Bones[1 + offset.x].xyz, IN.LNORMAL.xyz);
    r5.x = dot(Bones[0 + offset.x].xyz, IN.LNORMAL.xyz);
    r0.yzw = (r5.xyz * IN.LBLENDWEIGHT.x) + r0.yzw;
    r5.z = dot(Bones[2 + offset.z].xyz, IN.LNORMAL.xyz);
    r5.y = dot(Bones[1 + offset.z].xyz, IN.LNORMAL.xyz);
    r5.x = dot(Bones[0 + offset.z].xyz, IN.LNORMAL.xyz);
    r0.yzw = (r5.xyz * IN.LBLENDWEIGHT.z) + r0.yzw;
    r5.z = dot(Bones[2 + offset.w].xyz, IN.LNORMAL.xyz);
    r5.y = dot(Bones[1 + offset.w].xyz, IN.LNORMAL.xyz);
    r5.x = dot(Bones[0 + offset.w].xyz, IN.LNORMAL.xyz);
    q89.xyz = normalize(((1 - weight(IN.LBLENDWEIGHT.xyz)) * r5.xyz) + r0.yzw);
    q8.xyz = normalize(q6.xyz);
    q70.xyz = mul(float3x3(r2.xyz, r4.xyz, q89.xyz), normalize(normalize(q6.xyz) + normalize(eye2.xyz)));
    q49.xyz = mul(float3x3(r2.xyz, r4.xyz, q89.xyz), normalize(normalize(eye2.xyz) + LightData[0].xyz));
    m46.xyz = mul(float3x3(r2.xyz, r4.xyz, q89.xyz), LightData[0].xyz);
    OUT.texcoord_2.w = LightData[0].w;
    OUT.texcoord_2.xyz = normalize(m46.xyz);
    OUT.texcoord_3.w = r3.x * LightData[1].w;
    OUT.texcoord_3.x = dot(r2.xyz, q8.xyz) * r3.x;
    OUT.texcoord_3.y = r3.x * dot(r4.xyz, q8.xyz);
    OUT.texcoord_3.z = r3.x * dot(q89.xyz, q8.xyz);
    OUT.texcoord_4.w = r3.y * LightData[2].w;
    OUT.texcoord_5.xyz = normalize(q49.xyz);
    OUT.texcoord_6.xyz = r3.x * q70.xyz;
    r3.xzw = LightData[2].xyz - r1.xyz;
    q13.xyz = r3.xzw / length(r3.xzw);
    OUT.texcoord_4.x = r3.y * dot(r2.xyz, q13.xyz);
    OUT.texcoord_4.z = r3.y * dot(q89.xyz, q13.xyz);
    q72.xyz = mul(float3x3(r2.xyz, r4.xyz, q89.xyz), normalize(normalize(r3.xzw) + normalize(eye2.xyz)));
    OUT.texcoord_7.xyz = r3.y * q72.xyz;
    OUT.color_1.a = exp2(q14.x * FogParam.z);
    OUT.color_1.rgb = FogColor.rgb;
    OUT.texcoord_0.xy = IN.LTEXCOORD_0.xy;
    OUT.texcoord_1.w = LightData[0].w;
    OUT.texcoord_1.xyz = r1.xyz;
    OUT.texcoord_4.y = r3.y * dot(r4.xyz, q13.xyz);
	OUT.texcoord_0.zw = shw.xy;
	OUT.texcoord_6.w = shw.z;
	OUT.texcoord_7.w = shw.w;
    return OUT;
};

// approximately 170 instruction slots used
 