//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
// Parameters:

float4 AmbientColor : register(c1);
sampler2D BaseMap[7] : register(s0);
sampler2D NormalMap[7] : register(s7);
float4 PSLightColor[10] : register(c3);
float4 TESR_FogColor : register(c15);
float4 PSLightDir : register(c18);
float4 PSLightPosition[8] : register(c19);
float4 TESR_ShadowData : register(c32);
sampler2D TESR_ShadowMapBufferNear : register(s14) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s15) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };

// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_1       1
//   PSLightColor[0]    const_3       4
//   PSLightDir      const_18      1
//   PSLightPosition[0] const_19      3
//   BaseMap         texture_0       3
//   NormalMap       texture_7       3
//


// Structures:

struct VS_INPUT {
	float3 LCOLOR_0 : COLOR0;
    float3 BaseUV : TEXCOORD0;
    float3 texcoord_1 : TEXCOORD1_centroid;
	float3 texcoord_2 : TEXCOORD2_centroid;
    float3 texcoord_3 : TEXCOORD3_centroid;
    float3 texcoord_4 : TEXCOORD4_centroid;
    float3 texcoord_5 : TEXCOORD5_centroid;
	float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

#include "../Shadows/Includes/Shadow.hlsl"

PS_OUTPUT main(VS_INPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))

    float3 m51;
    float3 m53;
    float3 m55;
    float3 m59;
    float3 q0;
    float3 q1;
    float3 q10;
    float3 q11;
    float3 q2;
    float3 q24;
    float3 q25;
    float3 q3;
    float3 q4;
    float3 q5;
    float3 q6;
    float3 q7;
    float3 q8;
    float3 q9;
    float4 r0;
    float4 r1;
    float4 r2;
    float4 r3;
    float4 r4;
    float4 r5;

    r2.xyzw = tex2D(NormalMap[2], IN.BaseUV.xy);
    r0.xyzw = tex2D(NormalMap[1], IN.BaseUV.xy);
    r1.xyzw = tex2D(NormalMap[0], IN.BaseUV.xy);
    r5.xyzw = tex2D(BaseMap[2], IN.BaseUV.xy);
    r3.xyzw = tex2D(BaseMap[1], IN.BaseUV.xy);
    r4.xyzw = tex2D(BaseMap[0], IN.BaseUV.xy);
    q0.xyz = normalize(IN.texcoord_5.xyz);
    q1.xyz = normalize(IN.texcoord_4.xyz);
    q3.xyz = normalize(IN.texcoord_3.xyz);
    m53.xyz = mul(float3x3(q3.xyz, q1.xyz, q0.xyz), PSLightDir.xyz);
    q7.xyz = PSLightPosition[2].xyz - IN.texcoord_2.xyz;
    q8.xyz = q7.xyz / PSLightPosition[2].w;
    m59.xyz = mul(float3x3(q3.xyz, q1.xyz, q0.xyz), q7.xyz);
    q5.xyz = PSLightPosition[1].xyz - IN.texcoord_2.xyz;
    q6.xyz = q5.xyz / PSLightPosition[1].w;
    m55.xyz = mul(float3x3(q3.xyz, q1.xyz, q0.xyz), q5.xyz);
    q2.xyz = PSLightPosition[0].xyz - IN.texcoord_2.xyz;
    q4.xyz = q2.xyz / PSLightPosition[0].w;
    m51.xyz = mul(float3x3(q3.xyz, q1.xyz, q0.xyz), q2.xyz);
    q9.xyz = (IN.LCOLOR_0.z * r5.xyz) + ((IN.LCOLOR_0.x * r4.xyz) + (r3.xyz * IN.LCOLOR_0.y));
    r0.xyz = (2 * ((r1.xyz - 0.5) * IN.LCOLOR_0.x)) + (2 * ((r0.xyz - 0.5) * IN.LCOLOR_0.y));	// [0,1] to [-1,+1]
    r1.xyz = normalize((2 * ((r2.xyz - 0.5) * IN.LCOLOR_0.z)) + r0.xyz);	// [0,1] to [-1,+1]
    r2.xyz = shades(r1.xyz, normalize(m51.xyz)) * (1 - shades(q4.xyz, q4.xyz)) * PSLightColor[1].xyz;
    r2.xyz = (shades(r1.xyz, m53.xyz) * PSLightColor[0].rgb) + r2.xyz;
    q24.xyz = ((shades(r1.xyz, normalize(m55.xyz)) * (1 - shades(q6.xyz, q6.xyz))) * PSLightColor[2].xyz) + r2.xyz;
    q25.xyz = ((shades(r1.xyz, normalize(m59.xyz)) * (1 - shades(q8.xyz, q8.xyz))) * PSLightColor[3].xyz) + q24.xyz;
    q10.xyz = ((GetLightAmount(IN.texcoord_6, IN.texcoord_7) * q25.xyz) + AmbientColor.rgb) * q9.xyz;
    q11.xyz = (IN.BaseUV.z * (TESR_FogColor.xyz - (IN.texcoord_1.xyz * q10.xyz))) + (q10.xyz * IN.texcoord_1.xyz);
    OUT.color_0.a = 1;
    OUT.color_0.rgb = q11.xyz;

    return OUT;
};

// approximately 85 instruction slots used (6 texture, 79 arithmetic)