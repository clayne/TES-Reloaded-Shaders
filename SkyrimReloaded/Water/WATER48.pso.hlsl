//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
// Parameters:

float4 ShallowColor : register(c0);
float4 DeepColor : register(c1);
float4 ReflectionColor : register(c2);
float4 FresnelRI : register(c3);
float4 PosAdjust : register(c4);
float4 VarAmounts : register(c5);
float4 NormalsAmplitude : register(c6);
float4 WaterParams : register(c7);
float4 SunDir : register(c8);
float4 SunColor : register(c9);
float4 TESR_WaveParams : register(c10);

samplerCUBE CubeMapSampler : register(s0);
sampler2D Normals01Sampler : register(s1);

// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   ShallowColor     const_0       1
//   DeepColor        const_1       1
//   ReflectionColor  const_2       1
//   FresnelRI        const_3       1
//   PosAdjust        const_4       1
//   VarAmounts       const_5       1
//   NormalsAmplitude const_6       1
//   WaterParams      const_7       1
//   SunDir           const_8       1
//   SunColor         const_9       1
//   CubeMapSampler   texture_0       1
//   Normals01Sampler texture_1       1
//


// Structures:

struct VS_INPUT {
    float4 LTEXCOORD_0 : TEXCOORD0;
    float2 LTEXCOORD_1 : TEXCOORD1;
    float4 LCOLOR_1 : COLOR1;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN, float2 PixelPos : VPOS) {
    VS_OUTPUT OUT;

#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_10 = {-8192, 2, -1, -2};
    const int4 const_11 = {0, 1, -1, 0};
    const float4 const_12 = {-0.0989999995, 0.99000001, 0, 0};

    float3 q0;
    float1 q1;
    float3 q10;
    float3 q17;
    float3 q18;
    float1 q2;
    float1 q4;
    float1 q5;
    float3 q6;
    float3 q8;
    float4 r0;
    float4 r1;
    float4 r2;
    float2 r3;

    r2.xyzw = tex2D(Normals01Sampler, IN.LTEXCOORD_1);
    q0.xyz = normalize(IN.LTEXCOORD_0.xyz);
    r3.xy = const_11.xy;
    q10.xyz = normalize((NormalsAmplitude.x * TESR_WaveParams.x * ((2 * r2.xyz) + const_10.zzw)) + r3.xxy);
    q1.x = shades(SunDir.xyz, q10.xyz);
    q5.x = pow(abs(shades(q0.xyz - ((2 * dot(q0.xyz, q10.xyz)) * q10.xyz), SunDir.xyz)), VarAmounts.x);
    r0.xyw = WaterParams.xyw;
    q6.xyz = SunDir.w * SunColor.rgb;
    q2.x = 1 - shades(-q0.xyz, q10.xyz);
    q4.x = lerp(FresnelRI.x, 1, sqr(sqr(q2.x)) * q2.x);
    q17.xyz = (WaterParams.y * q10.xyz) + ((r0.y * const_11.xxz) + const_11.xxy);
    r1.xyzw = texCUBE(CubeMapSampler, q0.xyz - ((2 * dot(q0.xyz, q17.xyz)) * q17.xyz));
    r0.yzw = (r1.xyz * r0.w) - ReflectionColor.rgb;
    r0.yzw = (VarAmounts.y * r0.yzw) + ReflectionColor.rgb;
    r1.xyz = (q4.x * (DeepColor.rgb - ShallowColor.rgb)) + ShallowColor.rgb;
    r0.yzw = r0.yzw - (r1.xyz * q1.x);
    q18.xyz = (lerp(1, q4.x, saturate((IN.LTEXCOORD_0.w - 8192) / (r0.x - 8192))) * r0.yzw) + (q1.x * r1.xyz);
	r2.xyz = (q6.xyz * pow(abs(shades(q10.xyz, const_12.xxy)), ShallowColor.a * 2.5)) * WaterParams.z;
    q8.xyz = lerp(q18.xyz + ((DeepColor.a * (q5.x * q6.xyz)) + r2.xyz), IN.LCOLOR_1.xyz, IN.LCOLOR_1.w);
    OUT.color_0.a = 1;
    OUT.color_0.rgb = q8.xyz;

    return OUT;
};