//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
// Parameters:

row_major float4x4 TextureProj : register(c0);
float4 ShallowColor : register(c4);
float4 ReflectionColor : register(c5);
float4 FresnelRI : register(c6);
float4 PosAdjust : register(c7);
float4 VarAmounts : register(c8);
float4 NormalsAmplitude : register(c9);
float4 WaterParams : register(c10);
float4 TESR_WaveParams : register(c11);

sampler2D RefractionSampler : register(s0);
samplerCUBE CubeMapSampler : register(s1);
sampler2D Normals01Sampler : register(s2);
sampler2D Normals02Sampler : register(s3);
sampler2D Normals03Sampler : register(s4);


// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   TextureProj       const_0       4
//   ShallowColor      const_4       1
//   ReflectionColor   const_5       1
//   FresnelRI         const_6       1
//   PosAdjust         const_7       1
//   VarAmounts        const_8       1
//   NormalsAmplitude  const_9       1
//   WaterParams       const_10      1
//   RefractionSampler texture_0       1
//   CubeMapSampler    texture_1       1
//   Normals01Sampler  texture_2       1
//   Normals02Sampler  texture_3       1
//   Normals03Sampler  texture_4       1
//


// Structures:

struct VS_INPUT {
    float4 LTEXCOORD_0 : TEXCOORD0;
    float4 LTEXCOORD_1 : TEXCOORD1;
    float2 LTEXCOORD_2 : TEXCOORD2;
    float3 LTEXCOORD_4 : TEXCOORD4;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_INPUT IN, float2 PixelPos : VPOS) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_11 = {-8192, 2, -1, -2};
    const float4 const_12 = {0, 1, -1, 0.00200000009};

    float1 q0;
    float3 q1;
    float3 q2;
    float3 q3;
    float3 q4;
    float1 q5;
    float3 q7;
    float4 r0;
    float4 r1;
    float4 r2;
    float3 r3;
    float4 r4;

    r2.xyzw = tex2D(Normals02Sampler, IN.LTEXCOORD_1.zw);
    r0.xyzw = tex2D(Normals01Sampler, IN.LTEXCOORD_1.xy);
    q2.xyz = normalize(IN.LTEXCOORD_0.xyz);
    r1.xyz = const_12.xyz;
    r3.xz = const_11.xz;
    q0.x = saturate((IN.LTEXCOORD_0.w - 8192) / (r3.x + WaterParams.x));
    r0.xyz = (NormalsAmplitude.x * TESR_WaveParams.x * ((2 * r0.xyz) + const_11.zzw)) + r1.xxy;
    r0.xyz = (q0.x * (expand(r2.xyz) * NormalsAmplitude.y * TESR_WaveParams.x)) + r0.xyz;
    r2.xyzw = tex2D(Normals03Sampler, IN.LTEXCOORD_2);
    r0.xyz = (q0.x * (expand(r2.xyz) * NormalsAmplitude.z * TESR_WaveParams.x)) + r0.xyz;
    r2.xyz = normalize(r0.xyz);
    q5.x = 1 - shades(-q2.xyz, -r2.xyz);
    q1.xyz = (WaterParams.y * r2.xyz) + ((WaterParams.y * r1.xxz) + r1.xxy);
    r1.xyzw = texCUBE(CubeMapSampler, q2.xyz - ((2 * dot(q2.xyz, q1.xyz)) * q1.xyz));
    r0.xy = (VarAmounts.w * r2.xy) + IN.LTEXCOORD_4.xy;
    q3.xyz = (VarAmounts.y * ((WaterParams.w * r1.xyz) - ReflectionColor.rgb)) + ReflectionColor.rgb;
    r0.zw = (IN.LTEXCOORD_4.z * const_12.yx) + const_12.xy;
    r4.w = dot(TextureProj[3].xyzw, r0.xyzw);
    r4.y = r4.w - dot(TextureProj[1].xyzw, r0.xyzw);
    r4.z = dot(TextureProj[2].xyzw, r0.xyzw);
    r4.x = dot(TextureProj[0].xyzw, r0.xyzw);
    r0.xyzw = tex2Dproj(RefractionSampler, r4.xyzw);
    q4.xyz = (0.5 * (q3.xyz - ShallowColor.rgb)) + ShallowColor.rgb;
    q7.xyz = ((WaterParams.w * r0.xyz) - q4.xyz) * (1 - lerp(FresnelRI.x, -r3.z, q5.x * sqr(sqr(q5.x))));
    OUT.color_0.a = 1;
    OUT.color_0.rgb = ((saturate(1 - (IN.LTEXCOORD_0.w * 0.00200000009)) * q7.xyz) + q4.xyz) * PosAdjust.w;

    return OUT;
};