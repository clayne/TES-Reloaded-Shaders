//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SKIN2009.pso /Fcshaderdump19/SKIN2009.pso.dis
//
//
// Parameters:
//
float4 PSLightColor[4] : register(c2);
float4 TESR_SkinData : register(c6);
float4 TESR_SkinColor : register(c7);

sampler2D NormalMap : register(s0);
sampler2D AttenuationMap : register(s3);
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   PSLightColor[0]   const_2        1
//   PSLightColor[1]   const_3        1
//   PSLightColor[2]   const_4        1
//   NormalMap      texture_0       1
//   AttenuationMap texture_3       1
//


// Structures:

struct VS_OUTPUT {
    float2 NormalUV : TEXCOORD0;
    float3 Light0Dir : TEXCOORD1_centroid;
    float3 Light1Dir : TEXCOORD2_centroid;
    float3 Light2Dir : TEXCOORD3_centroid;
    float4 Att0UV : TEXCOORD4;
    float4 Att1UV : TEXCOORD5;
    float4 Att2UV : TEXCOORD6;
    float3 CameraDir : TEXCOORD7_centroid;
};

struct PS_OUTPUT {
    float4 Color : COLOR0;
};

// Code:

#include "includes/Skin.hlsl"

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float att12;
    float att13;
    float att6;
    float att7;
    float att8;
    float att9;
    float3 norm;
	float3 camera;
    float3 q10;
    float3 q14;
    float3 q15;
    float3 q17;
    float q4;
    float q5;

    norm = normalize(expand(tex2D(NormalMap, IN.NormalUV.xy).xyz));
    att8 = tex2D(AttenuationMap, IN.Att2UV.zw).x;
    att12 = tex2D(AttenuationMap, IN.Att2UV.xy).x;
    att9 = tex2D(AttenuationMap, IN.Att1UV.zw).x;
    att6 = tex2D(AttenuationMap, IN.Att1UV.xy).x;
    att7 = tex2D(AttenuationMap, IN.Att0UV.xy).x;
    att13 = tex2D(AttenuationMap, IN.Att0UV.zw).x;
	camera = normalize(IN.CameraDir.xyz);
    q4 = 1 - shade(norm, camera);
    q5 = q4 * sqr(q4);
	q14 = (shade(norm, normalize(IN.Light0Dir.xyz)) * PSLightColor[0].rgb) + ((q5 * PSLightColor[0].rgb) * 0.5);            
	q10 = (shade(norm, normalize(IN.Light1Dir.xyz)) * PSLightColor[1].rgb) + ((q5 * PSLightColor[1].rgb) * 0.5);
    q17 = (shade(norm, normalize(IN.Light2Dir.xyz)) * PSLightColor[2].rgb) + ((q5 * PSLightColor[2].rgb) * 0.5);
    
    q14 = psSkin(q14, PSLightColor[0].rgb, camera, IN.Light0Dir.xyz, norm);
    q10 = psSkin(q10, PSLightColor[1].rgb, camera, IN.Light1Dir.xyz, norm);
    q17 = psSkin(q17, PSLightColor[2].rgb, camera, IN.Light2Dir.xyz, norm);

    q15  = saturate(1 - att7  - att13) * q14;
    q15 += saturate(1 - att6  - att9 ) * q10;
    q15 += saturate(1 - att12 - att8 ) * q17;

    OUT.Color.a = 1;
    OUT.Color.rgb = q15;

    return OUT;
};

// approximately 61 instruction slots used (7 texture, 54 arithmetic)
