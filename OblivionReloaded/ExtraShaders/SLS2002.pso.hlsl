//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2002.pso /Fcshaderdump19/SLS2002.pso.dis
//
//
// Parameters:
//
float4 AmbientColor : register(c1);
sampler2D BaseMap : register(s0);
float4 EmittanceColor : register(c6);
sampler2D GlowMap : register(s4);
sampler2D NormalMap : register(s1);
float4 PSLightColor[4] : register(c2);
float4 Toggles : register(c7);
float4 TESR_InteriorDimmer : register(c24);
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   AmbientColor   const_1       1
//   PSLightColor[0]   const_2        1
//   EmittanceColor const_6       1
//   Toggles        const_7       1
//   BaseMap        texture_0       1
//   NormalMap      texture_1       1
//   GlowMap        texture_4       1
//


// Structures:

struct VS_OUTPUT {
    float2 BaseUV : TEXCOORD0;			// partial precision
    float3 texcoord_1 : TEXCOORD1_centroid;			// partial precision
    float3 color_0 : COLOR0;
    float4 color_1 : COLOR1;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))

    float3 q1;
    float3 q2;
    float3 q3;
    float3 q6;
    float4 r0;
    float4 r1;
    float4 r2;
    float4 r5;
    float2 r6 = 0;

    r2.xyzw = tex2D(NormalMap, IN.BaseUV.xy);			// partial precision
    r1.xyzw = tex2D(GlowMap, IN.BaseUV.xy);
    r0.xyzw = tex2D(BaseMap, IN.BaseUV.xy);    r5 = tex2D(BaseMap, r6.xy);			// partial precision
    r1.xyz = (r1.xyz * EmittanceColor.rgb) + AmbientColor.rgb;			// partial precision
    q6.xyz = max((shades(normalize(expand(r2.xyz)), IN.texcoord_1.xyz) * PSLightColor[0].rgb) + r1.xyz, 0);			// partial precision
    q1.xyz = (Toggles.x <= 0.0 ? r0.xyz : (r0.xyz * IN.color_0.rgb));			// partial precision
    q2.xyz = q6.xyz * q1.xyz;			// partial precision
    q3.xyz = (Toggles.y <= 0.0 ? q2.xyz : ((IN.color_1.a * (IN.color_1.rgb - (q1.xyz * q6.xyz))) + q2.xyz));			// partial precision
    OUT.color_0.a = r0.w * AmbientColor.a;			// partial precision
    OUT.color_0.rgb = q3.xyz;			// partial precision

    if ((r5.r > .9 && r5.g < .1 && r5.b < .1) && (r0.b > .1 && r0.g > .1)) {
        /*OUT.color_0.r = .7;
        OUT.color_0.g = .5;
        OUT.color_0.b = .2;*/

        OUT.color_0.rgb *= TESR_InteriorDimmer.x;
    }
    else if ((r5.r < .1 && r5.g < .1 && r5.b > .9)) {
        OUT.color_0.rgb *= TESR_InteriorDimmer.x;
    }
    else if ((r5.r < .1 && r5.g >.9 && r5.b < .1) && ((r0.b - r0.r) > .065)) {
        OUT.color_0.rgb *= TESR_InteriorDimmer.x;
    }
    else if ((r5.r > .9 && r5.g < .1 && r5.b > .9)) {
        //Do nothing
    }
    else {
        //OUT.color_0.rgb *= Shadow;
    }

    return OUT;
};

// approximately 21 instruction slots used (3 texture, 18 arithmetic)
