//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/STLEAF2000.pso /Fcshaderdump19/STLEAF2000.pso.dis
//
//
// Parameters:
//
sampler2D DiffuseMap : register(s0);
float4 TESR_ShadowData : register(c5);
float4 TESR_ShadowLightPosition[12] : register(c6);
sampler2D TESR_ShadowMapBufferNear : register(s4) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s5) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
row_major float4x4 TESR_InvViewProjectionTransform : register(c20);
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   DiffuseMap   texture_0       1
//


// Structures:

struct VS_OUTPUT {
    float2 DiffuseUV : TEXCOORD0;			// partial precision
    float3 texcoord_1 : TEXCOORD1;			// partial precision
    float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
    float4 texcoord_8 : TEXCOORD8;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

#include "../Shadows/Includes/Shadow.hlsl"

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    float4 r0;
    float shadow = GetLightAmountLeaves(IN.texcoord_6, IN.texcoord_7, IN.texcoord_8);

    r0.xyzw = tex2D(DiffuseMap, IN.DiffuseUV.xy);			// partial precision

    r0.xyz *= shadow;

    OUT.color_0.a = r0.w;			// partial precision
    OUT.color_0.rgb = r0.xyz * IN.texcoord_1.xyz;			// partial precision

    return OUT;
};

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
