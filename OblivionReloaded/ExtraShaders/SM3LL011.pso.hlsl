//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
// Parameters:

float4 AmbientColor : register(c0);
sampler2D BaseMap : register(s0);
float3 EyePosition : register(c1);
float4 LightData[8] : register(c9);
float3 MatAlpha : register(c3);
sampler2D NormalMap : register(s1);
sampler2D ShadowMap : register(s2);
sampler2D ShadowMask : register(s3);
float4 ToggleADTS : register(c5);
float4 ToggleNumLights : register(c6);
float4 TESR_ShadowData : register(c17);
float4 TESR_ShadowLightPosition[12] : register(c18);
sampler2D TESR_ShadowMapBufferNear : register(s8) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s9) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };



// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_0       1
//   EyePosition     const_1       1
//   MatAlpha        const_3       1
//   ToggleADTS      const_5       1
//   ToggleNumLights const_6       1
//   LightData[0]       const_9        1
//   LightData[1]       const_10        1
//   LightData[2]       const_11        1
//   LightData[3]       const_12        1
//   LightData[4]       const_13        1
//   LightData[5]       const_14        1
//   LightData[6]       const_15        1
//   LightData[7]       const_16        1
//   BaseMap         texture_0       1
//   NormalMap       texture_1       1
//   ShadowMap       texture_2       1
//   ShadowMask      texture_3       1
//


// Structures:

struct VS_INPUT {
    float2 BaseUV : TEXCOORD0;			// partial precision
    float3 color_0 : COLOR0;			// partial precision
    float3 texcoord_3 : TEXCOORD3_centroid;			// partial precision
    float3 texcoord_4 : TEXCOORD4_centroid;			// partial precision
    float3 texcoord_5 : TEXCOORD5_centroid;			// partial precision
    float3 texcoord_6 : TEXCOORD6_centroid;			// partial precision
    float4 texcoord_1 : TEXCOORD1;			// partial precision
    float4 texcoord_2 : TEXCOORD2;
    float4 texcoord_7 : TEXCOORD7_centroid;			// partial precision
    float4 texcoord_8 : TEXCOORD8;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

#include "../Shadows/Includes/Shadow.hlsl"

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_17 = {2, -2, -3, -4};
    const float4 const_2 = {-0.5, 0, 1, -1};
    const int4 const_4 = {4, -1, -2, 0};
    const int4 const_7 = {2, -4, -5, -6};
    const int4 const_8 = {2, -6, -7, 0};

    float3 eye141;
    float3 l15;
    float3 l18;
    float1 l299;
    float3 l5;
    float3 l54;
    float3 l58;
    float3 l62;
    float3 l74;
    float3 m102;
    float3 m86;
    float3 m92;
    float3 m98;
    float3 noxel1;
    float1 q10;
    float1 q12;
    float1 q14;
    float3 q28;
    float3 q31;
    float3 q32;
    float3 q35;
    float3 q36;
    float3 q39;
    float3 q4;
    float3 q44;
    float1 q6;
    float3 q8;
    float4 r0;
    float4 r1;
    float3 r11;
    float4 r2;
    float4 r3;
    float3 r4;
    float3 r5;
    float3 r6;
    float3 r7;
    float3 r8;
    float3 r9;
    float3 t2;
    float1 t3;

#define	TanSpaceProj	float3x3(r8.xyz, r7.xyz, r6.xyz)
#define	TanSpaceProj	float3x3(r8.xyz, r7.xyz, r6.xyz)

    r0.xyzw = tex2D(NormalMap, IN.BaseUV.xy);			// partial precision
    r3.xyz = normalize(expand(r0.xyz));			// partial precision
    r6.xyz = normalize(IN.texcoord_5.xyz);			// partial precision
    r7.xyz = normalize(IN.texcoord_4.xyz);			// partial precision
    r8.xyz = normalize(IN.texcoord_3.xyz);			// partial precision
    eye141.xyz = mul(TanSpaceProj, EyePosition.xyz - IN.texcoord_6.xyz);
    r5.xyz = normalize(eye141.xyz);			// partial precision
    r11.yz = const_2.yz;
    r1.w = (ToggleNumLights.x <= 0.0 ? r11.y : r11.z);

    if (0 != r1.w) {
      l74.xyz = mul(TanSpaceProj, LightData[1].xyz);
      l5.xyz = pow(abs(shades(normalize(r5.xyz + l74.xyz), r3.xyz)), ToggleNumLights.z) * LightData[0].xyz;			// partial precision
      r3.w = 1;
      q4.xyz = GetLightAmount(IN.texcoord_1, IN.texcoord_2, IN.texcoord_8);			// partial precision
      r0.xyz = q4.xyz * l5.xyz;			// partial precision
      r2.xyz = q4.xyz * (shade(r3.xyz, l74.xyz) * LightData[0].xyz);			// partial precision
    }
    else {
      r3.w = 0;
      r2.xyz = 0;			// partial precision
      r0.xyz = 0;			// partial precision
    }

    q6.x = min(ToggleNumLights.y, 4 - ToggleNumLights.x);			// partial precision
    r2.w = ((q6.x >= 0.0 ? 0 : 1) * (frac(q6.x) <= 0.0 ? 0 : 1)) + (q6.x - frac(q6.x));
    r1.w = (r2.w <= 0.0 ? 0 : 1);

    if (0 != r1.w) {
      r4.x = 2 * r3.w;
      r4.yz = r4.x + const_4.yz;
      q8.xyz = r4.x + const_4.wyz;
      r3.w = r3.w + 1;
      r9.xyz = (q8.xyz >= 0.0 ? q8.xyz : -r4.xyz);
      r1.xyzw = (r9.z <= 0.0 ? LightData[3].xyzw : (r9.y <= 0.0 ? LightData[2].xyzw : (r9.x <= 0.0 ? LightData[1].xyzw : r11.y)));
      q28.xyz = r1.xyz - IN.texcoord_6.xyz;
      m86.xyz = mul(TanSpaceProj, q28.xyz);
      q31.xyz = normalize(m86.xyz);			// partial precision
      q10.x = 1.0 - sqr(saturate(length(q28.xyz) / r1.w));			// partial precision
      l54.xyz = (r9.z <= 0.0 ? LightData[2].xyz : (r9.y <= 0.0 ? LightData[1].xyz : (r9.x <= 0.0 ? LightData[0].xyz : r11.y)));			// partial precision
      r0.xyz = (q10.x * (l54.xyz * pow(abs(shades(normalize(r5.xyz + q31.xyz), r3.xyz)), ToggleNumLights.z))) + r0.xyz;			// partial precision
      r2.xyz = (max(q10.x * dot(r3.xyz, q31.xyz), 0) * l54.xyz) + r2.xyz;			// partial precision
    }


    if (1 < r2.w) {
      r9.xyz = (2 * r3.w) + const_17.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r9.z == 0.0 ? LightData[5].xyzw : (r9.y == 0.0 ? LightData[4].xyzw : (r9.x == 0.0 ? LightData[3].xyzw : r11.y)));
      q32.xyz = r1.xyz - IN.texcoord_6.xyz;
      m92.xyz = mul(TanSpaceProj, q32.xyz);
      q35.xyz = normalize(m92.xyz);			// partial precision
      q12.x = 1.0 - sqr(saturate(length(q32.xyz) / r1.w));			// partial precision
      l58.xyz = (r9.z == 0.0 ? LightData[4].xyz : (r9.y == 0.0 ? LightData[3].xyz : (r9.x == 0.0 ? LightData[2].xyz : r11.y)));			// partial precision
      r0.xyz = (q12.x * (l58.xyz * pow(abs(shades(normalize(r5.xyz + q35.xyz), r3.xyz)), ToggleNumLights.z))) + r0.xyz;			// partial precision
      r2.xyz = (max(q12.x * dot(r3.xyz, q35.xyz), 0) * l58.xyz) + r2.xyz;			// partial precision
    }


    if (2 < r2.w) {
      r9.xyz = (2 * r3.w) + const_7.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r9.z == 0.0 ? LightData[7].xyzw : (r9.y == 0.0 ? LightData[6].xyzw : (r9.x == 0.0 ? LightData[5].xyzw : r11.y)));
      q36.xyz = r1.xyz - IN.texcoord_6.xyz;
      m98.xyz = mul(TanSpaceProj, q36.xyz);
      q39.xyz = normalize(m98.xyz);			// partial precision
      q14.x = 1.0 - sqr(saturate(length(q36.xyz) / r1.w));			// partial precision
      l62.xyz = (r9.z == 0.0 ? LightData[6].xyz : (r9.y == 0.0 ? LightData[5].xyz : (r9.x == 0.0 ? LightData[4].xyz : r11.y)));			// partial precision
      r0.xyz = (q14.x * (l62.xyz * pow(abs(shades(normalize(r5.xyz + q39.xyz), r3.xyz)), ToggleNumLights.z))) + r0.xyz;			// partial precision
      r2.xyz = (max(q14.x * dot(r3.xyz, q39.xyz), 0) * l62.xyz) + r2.xyz;			// partial precision
    }


    if (3 < r2.w) {
      l15.xyz = LightData[7].xyz - IN.texcoord_6.xyz;
      m102.xyz = mul(TanSpaceProj, l15.xyz);
      r5.xyz = r5.xyz + normalize(m102.xyz);			// partial precision
      r1.w = pow(abs(shades(normalize(r5.xyz), r3.xyz)), ToggleNumLights.z);			// partial precision
      l299.x = 1.0 - sqr(saturate(length(l15.xyz) / LightData[7].w));			// partial precision
      r5.xy = (2 * r3.w) + const_8.yz;
      l18.xyz = (r5.y == 0.0 ? LightData[7].xyz : (r5.x == 0.0 ? LightData[6].xyz : r11.y));			// partial precision
      r2.xyz = (max(l299.x * dot(r3.xyz, normalize(m102.xyz)), 0) * l18.xyz) + r2.xyz;			// partial precision
      r0.xyz = (l299.x * (r1.w * l18.xyz)) + r0.xyz;			// partial precision
    }

    r1.xyz = r2.xyz + ((ToggleADTS.x * AmbientColor.rgb) + (r11.z - ToggleADTS.x));			// partial precision
    r2.xyz = r0.w * r0.xyz;			// partial precision
    r0.xyzw = tex2D(BaseMap, IN.BaseUV.xy);			// partial precision
    q44.xyz = ((r0.xyz * IN.color_0.rgb) * r1.xyz) + r2.xyz;			// partial precision
    OUT.color_0.a = r0.w * MatAlpha.x;			// partial precision
    OUT.color_0.rgb = (IN.texcoord_7.w * (IN.texcoord_7.xyz - q44.xyz)) + q44.xyz;			// partial precision

    return OUT;
};

// approximately 229 instruction slots used (4 texture, 225 arithmetic)
 