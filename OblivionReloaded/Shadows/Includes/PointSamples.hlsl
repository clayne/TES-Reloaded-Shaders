//Poisson samples generated via https://github.com/bartwronski/PoissonSamplingGenerator

//TODO: all radius should be resolution dependent but these are good enough for now
static const float RADIUS = 3.0 / 500.0;
static const uint SAMPLE_NUM = 9;
static const uint TOTAL_SAMPLE_NUM = 32;
static const float3 POISSON_SAMPLES[TOTAL_SAMPLE_NUM] =
{
float3(-0.5119625f, -0.4827938f, -0.488937f),
float3(-0.2171264f, -0.4768726f, 0.374798f),
float3(-0.7552931f, -0.2426507f,-0.0314035f),
float3(-0.7136765f, -0.4496614f, 0.112522f),
float3(-0.5938849f, -0.6895654f, 0.0911893f),
float3(-0.3148003f, -0.7047654f, -0.932066f),
float3(-0.42215f, -0.2024607f, -0.345347f),
float3(-0.9466816f, -0.2014508f, -0.857173f),
float3(-0.8409063f, -0.03465778f, -0.622028f),
float3(-0.6517572f, -0.07476326f, 0.724845f),
float3(-0.1041822f, -0.02521214f, 0.0422376f),
float3(-0.3042712f, -0.02195431f, 0.754479f),
float3(-0.5082307f, 0.1079806f, 0.775262f),
float3(-0.08429877f, -0.2316298f, 0.82693f),
float3(-0.9879128f, 0.1113683f, -0.16596f),
float3(-0.3859636f, 0.3363545f, -0.020539f),
float3(-0.1925334f, 0.1787288f,-0.0113529f),
float3(0.003256182f, 0.138135f, 0.0108341f),
float3(-0.8706837f, 0.3010679f, -0.171209f),
float3(-0.6982038f, 0.1904326f, 0.379254f),
float3(0.1975043f, 0.2221317f, -0.577593f),
float3(0.1507788f, 0.4204168f, 0.514908f),
float3(0.3514056f, 0.09865579f, -0.977874f),
float3(0.1558783f, -0.08460935f, 0.170507f),
float3(-0.0684978f, 0.4461993f, 0.840266f),
float3(0.3780522f, 0.3478679f, 0.0510269f),
float3(0.3956799f, -0.1469177f, -0.939055f),
float3(0.5838975f, 0.1054943f, -0.0151372f),
float3(0.6155105f, 0.3245716f, 0.687002f),
float3(0.3928624f, -0.4417621f, 0.170232f),
float3(0.1749884f, -0.4202175f, -0.83755f),
float3(0.6813727f, -0.2424808f, 0.795679f),
};

static const float RADIUS_SKIN = 3.0 / 500.0;
static const uint SAMPLE_NUM_SKIN = 36;
static const uint TOTAL_SAMPLE_NUM_SKIN = 50;
static const float3 POISSON_SAMPLES_SKIN[TOTAL_SAMPLE_NUM_SKIN] =
{
float3(0.0376101559891f, -0.0306333432018f, -0.842152200973f),
float3(0.00133840181539f, 0.736917497947f, 0.592623496412f),
float3(-0.76138403729f, 0.568286882177f, -0.0908169776425f),
float3(0.121251516221f, -0.65909142394f, -0.165621367197f),
float3(-0.858767584451f, -0.474593721257f, 0.050589579669f),
float3(0.581188573814f, -0.319981074418f, 0.606675742564f),
float3(-0.201960683175f, -0.471182555225f, 0.654769010927f),
float3(0.916890120595f, -0.0604774989679f, -0.343792031565f),
float3(-0.307585403392f, 0.160448789587f, 0.338633618135f),
float3(0.531465064194f, 0.495289908587f, -0.121755739603f),
float3(-0.49774106785f, -0.449748409923f, -0.345130626355f),
float3(0.194925357717f, 0.0687841004311f, -0.0989522174091f),
float3(0.696201752017f, -0.565762517864f, -0.220161864546f),
float3(-0.635288053655f, -0.0919192795781f, -0.0428265312525f),
float3(0.186514701401f, 0.936787696239f, -0.213488362743f),
float3(0.193089811974f, -0.52771128421f, 0.313948070044f),
float3(-0.205593981586f, 0.576266721038f, -0.407563571885f),
float3(-0.140710424321f, 0.27944085713f, 0.936824881065f),
float3(0.187015300282f, -0.0220368773442f, 0.520438613608f),
float3(-0.726298314738f, 0.0289371213233f, -0.615513560943f),
float3(0.311501273448f, 0.466892618438f, 0.809350625982f),
float3(-0.611197452285f, -0.295829512257f, 0.593071901471f),
float3(0.64149216293f, -0.292828609133f, 0.167186874752f),
float3(-0.213930214666f, -0.335090487f, 0.131608644491f),
float3(0.463595455356f, -0.822928410986f, -0.17881641047f),
float3(0.487251901132f, 0.278766414211f, -0.681702150179f),
float3(0.691459203469f, 0.057769911097f, 0.581247294875f),
float3(-0.255842552173f, -0.803903075917f, -0.446223757475f),
float3(0.209586925136f, 0.645497418368f, 0.0864172588714f),
float3(0.678772728281f, -0.647214152765f, 0.221817488557f),
float3(0.0162488749837f, 0.465938831558f, -0.844595027639f),
float3(0.304078126659f, -0.36475935475f, -0.596447520823f),
float3(0.5025392213f, 0.499290358051f, 0.386886169513f),
float3(0.578491933877f, 0.619864407447f, -0.511593975903f),
float3(-0.25495456079f, -0.150593150191f, -0.194385671632f),
float3(-0.25280917941f, -0.881933148601f, 0.106884409068f),
float3(-0.205495142977f, 0.941162355353f, 0.0897839510989f),
float3(0.744779539809f, 0.335701896296f, -0.458346598304f),
float3(-0.298357768449f, 0.611996196699f, 0.344478420322f),
float3(-0.697571685996f, 0.461549342396f, 0.348836833749f),
float3(0.0291737417319f, -0.408387214613f, -0.818658707807f),
float3(0.432227339906f, 0.00773554415011f, -0.366545169632f),
float3(0.628455525725f, 0.139990082816f, -0.0422862483736f),
float3(0.955103110467f, -0.151448506259f, 0.210162809655f),
float3(-0.0520195219302f, -0.0604943934546f, 0.950162588867f),
float3(0.266664484871f, 0.577165982828f, -0.669392840316f),
float3(0.0413880458748f, 0.322737201247f, 0.43172581799f),
float3(-0.772325016023f, 0.24914630035f, -0.325888615181f),
float3(0.31138346829f, -0.211394065996f, -0.898917860869f),
float3(-0.861093096739f, -0.117306094293f, 0.332287500471f),
};

static const float RADIUS_SPEC = 4.0 / 500.0;
static const uint SAMPLE_NUM_SPEC = 4;